tags:
  name: Posts
  description: API for managing posts

components:
  schemas:
    Post:
      type: object
      required:
        - author
        - content
        - createdAt
      properties:
        id:
          type: string
          description: The auto-generated id of the post
        author:
          type: string
          description: The id of the author
        content:
          type: string
          description: The content of the post
        images:
          type: array
          items:
            type: string
          description: List of image URLs
        tags:
          type: array
          items:
            type: string
          description: List of tags
        createdAt:
          type: string
          format: date-time
          description: The date the post was created
        likes:
          type: array
          items:
            type: string
          description: List of user ids who liked the post
      example:
        id: d5fE_asz
        author: 60d0fe4f5311236168a109ca
        content: This is a sample post
        images: ["https://example.com/image1.jpg", "https://example.com/image2.jpg"]
        tags: ["sample", "post"]
        date: 2023-10-01T12:00:00Z
        likes: ["60d0fe4f5311236168a109cb", "60d0fe4f5311236168a109cc"]

/posts:
  get:
    summary: Get all posts
    tags: [Posts]
    parameters:
      - in: query
        name: page
        schema:
          type: integer
          default: 1
        description: Page number
      - in: query
        name: limit
        schema:
          type: integer
          default: 10
        description: Number of posts per page
    requestBody:
      required: false
      content:
        application/json:
          schema:
            type: object
            properties:
              user:
                type: string
                description: User ID of the users whose posts you want to see
              tag:
                type: string
                description: Post tag that all returned posts should have
    responses:
      200:
        description: A list of posts
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: integer
                limit:
                  type: integer
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/Post'
                total:
                  type: integer
                pages:
                  type: integer
      400:
        description: Invalid page or limit
  post:
    summary: Create a new post
    tags: [Posts]
    security:
      - jwt: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Post'
    responses:
      200:
        description: The created post
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      400:
        description: Invalid input
      401:
        description: Unauthorized

/posts/{id}:
  get:
    summary: Get a post by ID
    tags: [Posts]
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: Post ID
    responses:
      200:
        description: A single post
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      404:
        description: Post not found
  put:
    summary: Update a post by ID
    tags: [Posts]
    security:
      - jwt: []
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: Post ID
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Post'
    responses:
      200:
        description: The updated post
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      400:
        description: Invalid input
      401:
        description: Unauthorized
      403:
        description: Forbidden
      404:
        description: Post not found
  delete:
    summary: Deletes a post
    tags: [Posts]
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: Post ID
    responses:
      200:
        description: Post deleted successfully
      401:
        description: Unauthorized
      403:
        description: User is not the author
      404:
        description: Post not found
/posts/like/{id}:
  post:
    summary: Like a post
    tags: [Posts]
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: Post ID
    responses:
      200:
        description: Amount of likes the post has after the change
        content:
          application/json:
            schema:
              type: object
              properties:
                likes:
                  type: number
                  description: Amount of likes the post has
  delete:
    summary: Remove a like from a post
    tags: [Posts]
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: Post ID
    responses:
      200:
        description: Amount of likes the post has after the change
        content:
          application/json:
            schema:
              type: object
              properties:
                likes:
                  type: number
                  description: Amount of likes the post has